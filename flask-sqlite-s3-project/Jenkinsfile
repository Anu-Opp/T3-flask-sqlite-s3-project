pipeline {
    agent {
        label 'amazon-linux'
    }

    environment {
        S3_BUCKET = 't3-flask-app-artifacts'
        ARTIFACT_NAME = "flask-app-${BUILD_NUMBER}.zip"
        AWS_REGION = 'us-east-1'
        ANSIBLE_PATH = "${WORKSPACE}/flask-sqlite-s3-project/ansible"
    }

    stages {
        stage('Checkout') {
            steps {
                git credentialsId: 'git-credentials',
                    url: 'https://github.com/Anu-Opp/T3-flask-sqlite-s3-project.git',
                    branch: 'main'
                sh 'ls -l'
            }
        }

        stage('Install Dependencies') {
            steps {
                sh 'pip3 install -r flask-sqlite-s3-project/requirements.txt'
            }
        }

        stage('Test') {
            steps {
                dir('flask-sqlite-s3-project') {
                    sh '''python3 -m pytest || echo "No tests available"'''
                }
            }
        }

        stage('Package Artifact') {
            steps {
                sh '''
                    mkdir -p flask-sqlite-s3-project/templates
                    if [ -f flask-sqlite-s3-project/index.html ] && [ ! -f flask-sqlite-s3-project/templates/index.html ]; then
                        mv flask-sqlite-s3-project/index.html flask-sqlite-s3-project/templates/
                    fi
                    zip -r "$ARTIFACT_NAME" \
                        flask-sqlite-s3-project/app.py \
                        flask-sqlite-s3-project/templates/ \
                        flask-sqlite-s3-project/requirements.txt \
                        flask-sqlite-s3-project/init_db.sql || echo "Using existing files"
                '''
            }
        }

        stage('Upload to S3') {
            steps {
                withCredentials([[
                    $class: 'AmazonWebServicesCredentialsBinding',
                    credentialsId: 'aws-credentials',
                    accessKeyVariable: 'AWS_ACCESS_KEY_ID',
                    secretKeyVariable: 'AWS_SECRET_ACCESS_KEY'
                ]]) {
                    sh 'aws s3 cp "$ARTIFACT_NAME" s3://$S3_BUCKET/$ARTIFACT_NAME'
                }
            }
        }

        stage('Debug Info') {
            steps {
                sh '''
                    echo "WORKSPACE: $WORKSPACE"
                    echo "ANSIBLE_PATH: $ANSIBLE_PATH"
                    pwd
                    ls -al
                    ls -al "$ANSIBLE_PATH"
                '''
            }
        }

        stage('Deploy with Ansible') {
            steps {
                withCredentials([[
                    $class: 'AmazonWebServicesCredentialsBinding',
                    credentialsId: 'aws-credentials',
                    accessKeyVariable: 'AWS_ACCESS_KEY_ID',
                    secretKeyVariable: 'AWS_SECRET_ACCESS_KEY'
                ]]) {
                    sh '''
                        cd "$ANSIBLE_PATH"
                        source /var/lib/jenkins/.ansible-venv/bin/activate
                        ansible-playbook -i inventory/aws_ec2.yml \
                            -i inventory/group_jenkins_all.yml \
                            deploy-flask-app.yml \
                            -e "artifact_name=$ARTIFACT_NAME" \
                            -e "s3_bucket=$S3_BUCKET"
                    '''
                }
            }
        }
    }

    post {
        success {
            echo '‚úÖ Deployment successful! The Flask application is now accessible at http://your-app-server-ip:5000'
        }
        failure {
            echo '‚ùå Deployment failed. Check the logs for details.'
        }
    }
}

//üöÄ What the Debug Stage Shows You:
//Your current working directory (pwd)
//all files in the workspace (ls -al)
//the contents of your Ansible directory (ls -al "$ANSIBLE_PATH")
//Confirming WORKSPACE and ANSIBLE_PATH values are correct